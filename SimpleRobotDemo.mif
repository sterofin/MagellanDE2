-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 2839;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 0AAD;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 1129;  -- 	STORE  DVel        ; Reset API variables
           009 : 1128;  -- 	STORE  DTheta
           00A : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           00B : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00C : 828F;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00D : 8271;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00E : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00F : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           010 : 4ABC;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           011 : 3817;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           012 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           013 : 4AB9;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           014 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           015 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           016 : 280F;  -- 	JUMP   WaitForSafety
           017 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           018 : 4AB9;  -- 	AND    Mask1
           019 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           01A : 12A5;  -- 	STORE  Temp        ; (overkill, but looks nice)
           01B : 6001;  -- 	SHIFT  1
           01C : 52A5;  -- 	OR     Temp
           01D : 9807;  -- 	OUT    XLEDS
           01E : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01F : 4ABA;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           020 : 3817;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           021 : 0AAD;  -- 	LOAD   Zero
           022 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           023 : 98C3;  -- 	OUT    RESETPOS    ; reset the odometry to 0,0,0
           024 : B80A;  -- 	LOADI  10          ; period = (10 ms * 10) m 0.1s, or 10Hz.
           025 : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           026 : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           027 : 0ABA;  -- 	LOAD   Mask2
           028 : 52BB;  -- 	OR     Mask3
           029 : 52BD;  -- 	OR     Mask5
           02A : 52B8;  -- 	OR     Mask0
           02B : 98B2;  -- 	OUT    SONAREN ;Enable the necessary sonars
           02C : 8065;  -- 	CALL	MoveToStart	
           02D : 80BD;  -- 	CALL	MoveForwardScanning
           02E : 2830;  -- 	JUMP	Die
           02F : 282F;  -- 	JUMP   InfLoop
           030 : A00F;  -- 	CLI    &B1111      ; disable all interrupts
           031 : 0AAD;  -- 	LOAD   Zero        ; Stop everything.
           032 : 9883;  -- 	OUT    LVELCMD
           033 : 988B;  -- 	OUT    RVELCMD
           034 : 98B2;  -- 	OUT    SONAREN
           035 : 0838;  -- 	LOAD   DEAD        ; An indication that we are dead
           036 : 9805;  -- 	OUT    SSEG2       ; "dEAd" on the sseg
           037 : 2837;  -- 	JUMP   Forever     ; Do this forever.
           038 : DEAD;  -- 	DEAD:  DW &HDEAD   ; Example of a "local" variable
           039 : 812A;  -- 	CALL   ControlMovement
           03A : B000;  -- 	RETI   ; return from ISR
           03B : B814;  -- 	LOADI  20
           03C : 12DB;  -- 	STORE  MoveHeading
           03D : 810B;  -- 	CALL   Turn
           03E : B809;  -- 	LOADI  9
           03F : 12A5;  -- 	STORE  Temp
           040 : 0AC6;  -- 	LOAD   Ft2
           041 : 12DA;  -- 	STORE  MoveDistance
           042 : 8115;  -- 	CALL   MoveForDistance
           043 : B864;  -- 	LOADI  100
           044 : 12DB;  -- 	STORE  MoveHeading
           045 : 810B;  -- 	CALL   Turn ; initial Left Turn to set up Diamond
           046 : B8D5;  -- 	LOADI &Hd5
           047 : 12DA;  -- 	STORE MoveDistance
           048 : 8093;  -- 	CALL  MoveX
           049 : BFA6;  -- 	LOADI  -90
           04A : 12DB;  -- 	STORE  MoveHeading
           04B : 810B;  -- 	CALL   Turn
           04C : BA88;  -- 	LOADI  &H288
           04D : 12DA;  -- 	STORE  MoveDistance
           04E : 80A8;  -- 	CALL   MoveY
           04F : BFA6;  -- 	LOADI  -90
           050 : 12DB;  -- 	STORE  MoveHeading
           051 : 810B;  -- 	CALL   Turn
           052 : BA88;  -- 	LOADI  &H288
           053 : 12DA;  -- 	STORE  MoveDistance
           054 : 8093;  -- 	CALL   MoveX
           055 : BFA6;  -- 	LOADI  -90
           056 : 12DB;  -- 	STORE  MoveHeading
           057 : 810B;  -- 	CALL   Turn
           058 : BA88;  -- 	LOADI  &H288
           059 : 12DA;  -- 	STORE  MoveDistance
           05A : 80A8;  -- 	CALL   MoveY
           05B : BFA6;  -- 	LOADI  -90
           05C : 12DB;  -- 	STORE  MoveHeading
           05D : 810B;  -- 	CALL   Turn
           05E : B950;  -- 	LOADI  &H150
           05F : 12DA;  -- 	STORE  MoveDistance
           060 : 8093;  -- 	CALL   MoveX
           061 : B86F;  -- 	LOADI  111
           062 : 12DB;  -- 	STORE  MoveHeading
           063 : 810B;  -- 	CALL   Turn
           064 : 8800;  -- 	RETURN
           065 : 0ABA;  -- 	LOAD   Mask2
           066 : 52BB;  -- 	OR     Mask3
           067 : 52BD;  -- 	OR     Mask5
           068 : 52B8;  -- 	OR     Mask0
           069 : 98B2;  -- 	OUT    SONAREN ;Enable the necessary sonars
           06A : B85A;  -- 	LOADI  90     ;Go Upwards 4 ft
           06B : 12DB;  -- 	STORE  MoveHeading
           06C : 810B;  -- 	CALL   Turn
           06D : 0ACA;  -- 	LOAD   Ft4
           06E : 12DA;  -- 	STORE  MoveDistance
           06F : 80A8;  -- 	CALL   MoveY
           070 : BFA6;  -- 	LOADI  -90
           071 : 12DB;  -- 	STORE  MoveHeading
           072 : 810B;  -- 	CALL   Turn
           073 : 0AC7;  -- 	LOAD   Ft2_5
           074 : 12DA;  -- 	STORE  MoveDistance
           075 : 8093;  -- 	CALL   MoveX
           076 : B85A;  -- 	LOADI  90
           077 : 12DB;  -- 	STORE  MoveHeading
           078 : 810B;  -- 	CALL   Turn
           079 : 0AC4;  -- 	LOAD   Ft1
           07A : 12DA;  -- 	STORE  MoveDistance
           07B : 80A8;  -- 	CALL   MoveY
           07C : BFA6;  -- 	LOADI  -90
           07D : 12DB;  -- 	STORE  MoveHeading
           07E : 810B;  -- 	CALL   Turn
           07F : 8800;  -- 	RETURN
           080 : 0000;  -- OldDist:	DW 0
           081 : 0000;  -- TempDist:	DW 0
           082 : 90A8;  -- 	IN	Dist0
           083 : 1081;  -- 	STORE	TempDist
           084 : BF6A;  -- 	LOADI	-150
           085 : 988B;  -- 	OUT 	RVELCMD
           086 : B896;  -- 	LOADI	150
           087 : 9883;  -- 	OUT		LVELCMD
           088 : 0881;  -- 	LOAD 	TempDist
           089 : 1080;  -- 	STORE	OldDist
           08A : 90A8;  -- 	IN		Dist0
           08B : 1081;  -- 	STORE	TempDist
           08C : 2080;  -- 	SUB		OldDist
           08D : 3088;  -- 	JNEG	Looper
           08E : 4088;  -- 	JZERO	Looper
           08F : B800;  -- 	LOADI	0
           090 : 988B;  -- 	OUT 	RVELCMD
           091 : 9883;  -- 	OUT	LVELCMD
           092 : 8800;  -- 	RETURN
           093 : 90C2;  -- 	IN	THETA
           094 : 1128;  -- 	STORE	DTheta
           095 : 0AD3;  -- 	LOAD	FMid
           096 : 1129;  -- 	STORE	DVel
           097 : 90C0;  -- 	IN      XPOS
           098 : 12AB;  -- 	STORE   StoreX
           099 : 812A;  -- 	CALL	ControlMovement
           09A : 90C0;  -- 	IN	XPOS
           09B : 9804;  -- 	OUT	SSEG1
           09C : 0AAB;  -- 	LOAD	StoreX
           09D : 9805;  -- 	OUT	SSEG2
           09E : 90C0;  -- 	IN      XPOS
           09F : 22AB;  -- 	SUB     StoreX
           0A0 : 8171;  -- 	CALL    Abs
           0A1 : 9806;  -- 	OUT	LCD
           0A2 : 22DA;  -- 	SUB     MoveDistance
           0A3 : 3099;  -- 	JNEG	DistloopX
           0A4 : 0AAD;  -- 	LOAD	Zero
           0A5 : 1129;  -- 	STORE	DVel
           0A6 : 812A;  -- 	CALL	ControlMovement
           0A7 : 8800;  -- 	RETURN
           0A8 : 90C2;  -- 	IN	THETA
           0A9 : 1128;  -- 	STORE	DTheta
           0AA : 0AD3;  -- 	LOAD	FMid
           0AB : 1129;  -- 	STORE	DVel
           0AC : 90C1;  -- 	IN      YPOS
           0AD : 12AA;  -- 	STORE   StoreY
           0AE : 812A;  -- 	CALL	ControlMovement
           0AF : 90C1;  -- 	IN	YPOS
           0B0 : 9804;  -- 	OUT	SSEG1
           0B1 : 0AAA;  -- 	LOAD	StoreY
           0B2 : 9805;  -- 	OUT	SSEG2
           0B3 : 90C1;  -- 	IN      YPOS
           0B4 : 22AA;  -- 	SUB     StoreY
           0B5 : 8171;  -- 	CALL    Abs
           0B6 : 9806;  -- 	OUT	LCD
           0B7 : 22DA;  -- 	SUB     MoveDistance
           0B8 : 30AE;  -- 	JNEG	DistloopY
           0B9 : 0AAD;  -- 	LOAD	Zero
           0BA : 1129;  -- 	STORE	DVel
           0BB : 812A;  -- 	CALL	ControlMovement
           0BC : 8800;  -- 	RETURN
           0BD : 90C2;  -- 	IN      THETA
           0BE : 1128;  -- 	STORE   DTheta
           0BF : 0AD3;  -- 	LOAD    FMid
           0C0 : 1129;  -- 	STORE   DVel
           0C1 : 812A;  -- 	CALL    ControlMovement
           0C2 : B801;  -- 	LOADI   1
           0C3 : 9806;  -- 	OUT     LCD
           0C4 : 90AA;  -- 	IN	DIST2
           0C5 : 22C4;  -- 	SUB	Ft1
           0C6 : 30F4;  -- 	JNEG	Kill
           0C7 : 90AB;  -- 	IN	DIST3
           0C8 : 22C6;  -- 	SUB 	Ft2
           0C9 : 30F4;  -- 	JNEG    Kill
           0CA : 90AD;  -- 	IN	Dist5
           0CB : 9804;  -- 	OUT	SSEG1
           0CC : 30C1;  -- 	JNEG    FDistloop
           0CD : 22CB;  -- 	SUB	Ft8
           0CE : 9805;  -- 	OUT	SSEG2
           0CF : 30D1;  -- 	JNEG	MoveToNewObstacle
           0D0 : 28C1;  -- 	JUMP	FDistloop
           0D1 : B802;  -- 	LOADI   2
           0D2 : 9806;  -- 	OUT     LCD
           0D3 : 0AAD;  -- 	LOAD	Zero
           0D4 : 1129;  -- 	STORE	DVel
           0D5 : 812A;  -- 	CALL	ControlMovement
           0D6 : 0AC4;  -- 	LOAD	Ft1
           0D7 : 12DA;  -- 	STORE   MoveDistance
           0D8 : 8093;  -- 	CALL    MoveX
           0D9 : 90AD;  -- 	IN	Dist5
           0DA : 22C6;  -- 	SUB	Ft2
           0DB : 12DC;  -- 	STORE	ObstDistance
           0DC : 0AAD;  -- 	LOAD	Zero
           0DD : 6FA6;  -- 	ADDI	-90
           0DE : 12DB;  -- 	STORE	MoveHeading
           0DF : 810B;  -- 	CALL	Turn
           0E0 : 0ADC;  -- 	LOAD	ObstDistance
           0E1 : 12DA;  -- 	STORE   MoveDistance
           0E2 : 80A8;  -- 	CALL	MoveY
           0E3 : 8043;  -- 	CALL	MakeSquare
           0E4 : 0ADC;  -- 	LOAD	ObstDistance
           0E5 : 22C4;  -- 	SUB 	Ft1
           0E6 : 12DA;  -- 	STORE   MoveDistance
           0E7 : 80A8;  -- 	CALL    MoveY
           0E8 : BFA6;  -- 	LOADI   -90
           0E9 : 12DB;  -- 	STORE   MoveHeading
           0EA : 810B;  -- 	CALL	Turn
           0EB : 0AC4;  -- 	LOAD	Ft1
           0EC : 12DA;  -- 	STORE   MoveDistance
           0ED : 8093;  -- 	CALL    MoveX
           0EE : 0ADD;  -- 	LOAD	Tries
           0EF : 22AE;  -- 	SUB	One
           0F0 : 12DD;  -- 	STORE	Tries
           0F1 : 38BD;  -- 	JPOS    MoveForwardScanning
           0F2 : 40BD;  -- 	JZERO	MoveForwardScanning
           0F3 : 2830;  -- 	JUMP	Die
           0F4 : 0AAD;  -- 	LOAD	Zero
           0F5 : 1129;  -- 	STORE	DVel
           0F6 : 812A;  -- 	CALL	ControlMovement
           0F7 : 282F;  -- 	JUMP    InfLoop
           0F8 : 0AA6;  -- 	LOAD   Sensor2Dist
           0F9 : 9805;  -- 	OUT    SSEG2
           0FA : 90AA;  -- 	IN     DIST2
           0FB : 22A9;  -- 	SUB    ErrorNum
           0FC : 90AA;  -- 	IN     DIST2
           0FD : 22A6;  -- 	SUB    Sensor2Dist
           0FE : 1AA8;  -- 	ADD    Threshold
           0FF : 3102;  -- 	JNEG   FoundObstacle2
           100 : 90AA;  -- 	IN     DIST2
           101 : 12A6;  -- 	STORE  Sensor2Dist
           102 : 9806;  -- 	OUT LCD
           103 : BFF4;  -- 	LOADI  -12
           104 : 12DB;  -- 	STORE  MoveHeading
           105 : 810B;  -- 	CALL   Turn
           106 : 90AA;  -- 	IN     DIST2
           107 : 22C5;  -- 	SUB    Ft1_5
           108 : 12DA;  -- 	STORE  MoveDistance
           109 : 8115;  -- 	CALL   MoveForDistance
           10A : 8800;  -- 	RETURN
           10B : 90C2;  -- 	IN    Theta
           10C : 1ADB;  -- 	ADD   MoveHeading
           10D : 816B;  -- 	CALL  Mod360
           10E : 1128;  -- 	STORE DTheta
           10F : 812A;  -- 	CALL  ControlMovement
           110 : 90C2;  -- 	IN	  Theta
           111 : 2128;  -- 	SUB	  DTheta
           112 : 4114;  -- 	JZERO TermTurn
           113 : 290F;  -- 	JUMP  TurnAgain
           114 : 8800;  -- 	RETURN
           115 : 9802;  -- 	OUT		TIMER
           116 : 90C2;  -- 	IN		THETA
           117 : 1128;  -- 	STORE	DTheta
           118 : 0AD3;  -- 	LOAD	FMid
           119 : 1129;  -- 	STORE	DVel
           11A : 812A;  -- 	CALL	ControlMovement
           11B : 9002;  -- 	IN 		TIMER
           11C : 11FD;  -- 	STORE 	m16sA
           11D : B823;  -- 	LOADI	35
           11E : 11FE;  -- 	STORE	m16sB
           11F : 81DA;  -- 	CALL	Mult16s
           120 : 0ADA;  -- 	LOAD	MoveDistance
           121 : 2201;  -- 	SUB		mres16sL
           122 : 9804;  -- 	OUT		SSEG1
           123 : 391A;  -- 	JPOS	Distloop
           124 : 0AAD;  -- 	LOAD	Zero
           125 : 1129;  -- 	STORE	DVel
           126 : 812A;  -- 	CALL	ControlMovement
           127 : 8800;  -- 	RETURN
           128 : 0000;  -- DTheta:    DW 0
           129 : 0000;  -- DVel:      DW 0
           12A : B832;  -- 	LOADI  50          ; used for the CapValue subroutine
           12B : 116A;  -- 	STORE  MaxVal
           12C : 8157;  -- 	CALL   GetThetaErr ; get the heading error
           12D : 6002;  -- 	SHIFT  2
           12E : 1154;  -- 	STORE  CMAErr      ; hold temporarily
           12F : 6002;  -- 	SHIFT  2           ; multiply by another 4
           130 : 815E;  -- 	CALL   CapValue    ; get a +/- max of 50
           131 : 1954;  -- 	ADD    CMAErr
           132 : 1154;  -- 	STORE  CMAErr      ; now contains a desired differential
           133 : B9FE;  -- 	LOADI  510
           134 : 116A;  -- 	STORE  MaxVal
           135 : 0929;  -- 	LOAD   DVel
           136 : 815E;  -- 	CALL   CapValue    ; ensure velocity is valid
           137 : 1129;  -- 	STORE  DVel        ; overwrite any invalid input
           138 : 1954;  -- 	ADD    CMAErr
           139 : 815E;  -- 	CALL   CapValue    ; ensure velocity is valid
           13A : 1156;  -- 	STORE  CMAR
           13B : 0954;  -- 	LOAD   CMAErr
           13C : 8172;  -- 	CALL   Neg         ; left wheel gets negative differential
           13D : 1929;  -- 	ADD    DVel
           13E : 815E;  -- 	CALL   CapValue
           13F : 1155;  -- 	STORE  CMAL
           140 : 0954;  -- 	LOAD   CMAErr
           141 : 6001;  -- 	SHIFT  1           ; double the differential
           142 : 1154;  -- 	STORE  CMAErr
           143 : 0956;  -- 	LOAD   CMAR
           144 : 2155;  -- 	SUB    CMAL        ; calculate the actual differential
           145 : 2154;  -- 	SUB    CMAErr      ; should be 0 if nothing got capped
           146 : 414F;  -- 	JZERO  CMADone
           147 : 1154;  -- 	STORE  CMAErr      ; the missing part
           148 : 1955;  -- 	ADD    CMAL
           149 : 815E;  -- 	CALL   CapValue
           14A : 1155;  -- 	STORE  CMAL
           14B : 0956;  -- 	LOAD   CMAR
           14C : 2154;  -- 	SUB    CMAErr
           14D : 815E;  -- 	CALL   CapValue
           14E : 1156;  -- 	STORE  CMAR
           14F : 0955;  -- 	LOAD   CMAL
           150 : 9883;  -- 	OUT    LVELCMD
           151 : 0956;  -- 	LOAD   CMAR
           152 : 988B;  -- 	OUT    RVELCMD
           153 : 8800;  -- 	RETURN
           154 : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           155 : 0000;  -- 	CMAL:    DW 0      ; holds temp left velocity
           156 : 0000;  -- 	CMAR:    DW 0      ; holds temp right velocity
           157 : 90C2;  -- 	IN     THETA
           158 : 2128;  -- 	SUB    DTheta      ; actual - desired angle
           159 : 8172;  -- 	CALL   Neg         ; desired - actual angle
           15A : 68B4;  -- 	ADDI   180
           15B : 816B;  -- 	CALL   Mod360
           15C : 6F4C;  -- 	ADDI   -180
           15D : 8800;  -- 	RETURN
           15E : 216A;  -- 	SUB     MaxVal
           15F : 3965;  -- 	JPOS    CapVelHigh
           160 : 196A;  -- 	ADD     MaxVal
           161 : 196A;  -- 	ADD     MaxVal
           162 : 3167;  -- 	JNEG    CapVelLow
           163 : 216A;  -- 	SUB     MaxVal
           164 : 8800;  -- 	RETURN
           165 : 096A;  -- 	LOAD    MaxVal
           166 : 8800;  -- 	RETURN
           167 : 096A;  -- 	LOAD    MaxVal
           168 : 8172;  -- 	CALL    Neg
           169 : 8800;  -- 	RETURN
           16A : 01FE;  -- 	MaxVal: DW 510
           16B : 316E;  -- 	JNEG   M360N
           16C : 6E98;  -- 	ADDI   -360
           16D : 296B;  -- 	JUMP   Mod360
           16E : 6968;  -- 	ADDI   360
           16F : 316E;  -- 	JNEG   M360N
           170 : 8800;  -- 	RETURN
           171 : 3974;  -- 	JPOS   Abs_r
           172 : 5AAC;  -- 	XOR    NegOne       ; Flip all bits
           173 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           174 : 8800;  -- 	RETURN
           175 : 09D5;  -- 	LOAD   AtanY
           176 : 8171;  -- 	CALL   Abs          ; abs(y)
           177 : 11D7;  -- 	STORE  AtanT
           178 : 09D4;  -- 	LOAD   AtanX        ; abs(x)
           179 : 8171;  -- 	CALL   Abs
           17A : 21D7;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           17B : 3186;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           17C : 09D4;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           17D : 3183;  -- 	JNEG   A2_R3
           17E : 8195;  -- 	CALL   A2_calc      ; Octants 1, 8
           17F : 3181;  -- 	JNEG   A2_R1n
           180 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           181 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           182 : 8800;  -- 	RETURN
           183 : 8195;  -- 	CALL   A2_calc      ; Octants 4, 5            
           184 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           185 : 8800;  -- 	RETURN
           186 : 09D5;  -- 	LOAD   AtanY        ; Swap input arguments
           187 : 11D7;  -- 	STORE  AtanT
           188 : 09D4;  -- 	LOAD   AtanX
           189 : 11D5;  -- 	STORE  AtanY
           18A : 09D7;  -- 	LOAD   AtanT
           18B : 11D4;  -- 	STORE  AtanX
           18C : 3991;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           18D : 8195;  -- 	CALL   A2_calc      ; else octants 6, 7
           18E : 8172;  -- 	CALL   Neg          ; Negatge the number
           18F : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           190 : 8800;  -- 	RETURN
           191 : 8195;  -- 	CALL   A2_calc      ; Octants 2, 3
           192 : 8172;  -- 	CALL   Neg          ; negate the angle
           193 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           194 : 8800;  -- 	RETURN
           195 : 09D5;  -- 	LOAD   AtanY
           196 : 1234;  -- 	STORE  d16sN        ; Y in numerator
           197 : 09D4;  -- 	LOAD   AtanX
           198 : 1235;  -- 	STORE  d16sD        ; X in denominator
           199 : 81C1;  -- 	CALL   A2_div       ; divide
           19A : 0A3A;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           19B : 11D6;  -- 	STORE  AtanRatio
           19C : 11FD;  -- 	STORE  m16sA
           19D : 11FE;  -- 	STORE  m16sB
           19E : 81B8;  -- 	CALL   A2_mult      ; X^2
           19F : 11FD;  -- 	STORE  m16sA
           1A0 : 09D8;  -- 	LOAD   A2c
           1A1 : 11FE;  -- 	STORE  m16sB
           1A2 : 81B8;  -- 	CALL   A2_mult
           1A3 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           1A4 : 1235;  -- 	STORE  d16sD
           1A5 : 09D6;  -- 	LOAD   AtanRatio
           1A6 : 1234;  -- 	STORE  d16sN        ; Ratio in numerator
           1A7 : 81C1;  -- 	CALL   A2_div       ; divide
           1A8 : 0A3A;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           1A9 : 11FD;  -- 	STORE  m16sA        ; <= result in radians
           1AA : 09D9;  -- 	LOAD   A2cd         ; degree conversion factor
           1AB : 11FE;  -- 	STORE  m16sB
           1AC : 81B8;  -- 	CALL   A2_mult      ; convert to degrees
           1AD : 11D7;  -- 	STORE  AtanT
           1AE : 6017;  -- 	SHIFT  -7           ; check 7th bit
           1AF : 4AAE;  -- 	AND    One
           1B0 : 41B5;  -- 	JZERO  A2_rdwn      ; round down
           1B1 : 09D7;  -- 	LOAD   AtanT
           1B2 : 6018;  -- 	SHIFT  -8
           1B3 : 6801;  -- 	ADDI   1            ; round up
           1B4 : 8800;  -- 	RETURN
           1B5 : 09D7;  -- 	LOAD   AtanT
           1B6 : 6018;  -- 	SHIFT  -8           ; round down
           1B7 : 8800;  -- 	RETURN
           1B8 : 81DA;  -- 	CALL   Mult16s
           1B9 : 0A02;  -- 	LOAD   mres16sH
           1BA : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           1BB : 1202;  -- 	STORE  mres16sH
           1BC : 0A01;  -- 	LOAD   mres16sL
           1BD : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           1BE : 4AC0;  -- 	AND    LowByte
           1BF : 5202;  -- 	OR     mres16sH     ; combine high and low words of result
           1C0 : 8800;  -- 	RETURN
           1C1 : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           1C2 : 11D7;  -- 	STORE  AtanT
           1C3 : 09D7;  -- 	LOAD   AtanT
           1C4 : 6FFF;  -- 	ADDI   -1
           1C5 : 39C8;  -- 	JPOS   A2_DN        ; not done; continue shifting
           1C6 : 8203;  -- 	CALL   Div16s       ; do the standard division
           1C7 : 8800;  -- 	RETURN
           1C8 : 11D7;  -- 	STORE  AtanT
           1C9 : 0A34;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           1CA : 6001;  -- 	SHIFT  1
           1CB : 5A34;  -- 	XOR    d16sN        ; if the sign changed,
           1CC : 31D0;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           1CD : 5A34;  -- 	XOR    d16sN        ; get back shifted version
           1CE : 1234;  -- 	STORE  d16sN
           1CF : 29C3;  -- 	JUMP   A2_DL
           1D0 : 0A35;  -- 	LOAD   d16sD
           1D1 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           1D2 : 1235;  -- 	STORE  d16sD
           1D3 : 29C3;  -- 	JUMP   A2_DL
           1D4 : 0000;  -- AtanX:      DW 0
           1D5 : 0000;  -- AtanY:      DW 0
           1D6 : 0000;  -- AtanRatio:  DW 0        ; =y/x
           1D7 : 0000;  -- AtanT:      DW 0        ; temporary value
           1D8 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           1D9 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           1DA : B800;  -- 	LOADI  0
           1DB : 11FF;  -- 	STORE  m16sc        ; clear carry
           1DC : 1202;  -- 	STORE  mres16sH     ; clear result
           1DD : B810;  -- 	LOADI  16           ; load 16 to counter
           1DE : 1200;  -- 	STORE  mcnt16s      
           1DF : 09FF;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           1E0 : 41E4;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           1E1 : 0A02;  -- 	LOAD   mres16sH     ; if a carry, 
           1E2 : 19FD;  -- 	ADD    m16sA        ;  add multiplicand to result H
           1E3 : 1202;  -- 	STORE  mres16sH
           1E4 : 09FE;  -- 	LOAD   m16sB
           1E5 : 4AAE;  -- 	AND    One          ; check bit 0 of multiplier
           1E6 : 11FF;  -- 	STORE  m16sc        ; save as next carry
           1E7 : 41EB;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           1E8 : 0A02;  -- 	LOAD   mres16sH     ; if bit 0 set,
           1E9 : 21FD;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           1EA : 1202;  -- 	STORE  mres16sH
           1EB : 09FE;  -- 	LOAD   m16sB
           1EC : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           1ED : 49FC;  -- 	AND    c7FFF        ; clear msb
           1EE : 11FE;  -- 	STORE  m16sB
           1EF : 0A02;  -- 	LOAD   mres16sH     ; load result H
           1F0 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           1F1 : 51FE;  -- 	OR     m16sB
           1F2 : 11FE;  -- 	STORE  m16sB        ; result L now includes carry out from H
           1F3 : 0A02;  -- 	LOAD   mres16sH
           1F4 : 6011;  -- 	SHIFT  -1
           1F5 : 1202;  -- 	STORE  mres16sH     ; shift result H >>1
           1F6 : 0A00;  -- 	LOAD   mcnt16s
           1F7 : 6FFF;  -- 	ADDI   -1           ; check counter
           1F8 : 39DE;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           1F9 : 09FE;  -- 	LOAD   m16sB
           1FA : 1201;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           1FB : 8800;  -- 	RETURN              ; Done
           1FC : 7FFF;  -- c7FFF: DW &H7FFF
           1FD : 0000;  -- m16sA: DW 0 ; multiplicand
           1FE : 0000;  -- m16sB: DW 0 ; multipler
           1FF : 0000;  -- m16sc: DW 0 ; carry
           200 : 0000;  -- mcnt16s: DW 0 ; counter
           201 : 0000;  -- mres16sL: DW 0 ; result low
           202 : 0000;  -- mres16sH: DW 0 ; result high
           203 : B800;  -- 	LOADI  0
           204 : 123B;  -- 	STORE  dres16sR     ; clear remainder result
           205 : 1238;  -- 	STORE  d16sC1       ; clear carry
           206 : 0A34;  -- 	LOAD   d16sN
           207 : 5A35;  -- 	XOR    d16sD
           208 : 1236;  -- 	STORE  d16sS        ; sign determination = N XOR D
           209 : B811;  -- 	LOADI  17
           20A : 1237;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           20B : 0A35;  -- 	LOAD   d16sD
           20C : 8171;  -- 	CALL   Abs          ; take absolute value of denominator
           20D : 1235;  -- 	STORE  d16sD
           20E : 0A34;  -- 	LOAD   d16sN
           20F : 8171;  -- 	CALL   Abs          ; take absolute value of numerator
           210 : 1234;  -- 	STORE  d16sN
           211 : 0A34;  -- 	LOAD   d16sN
           212 : 601F;  -- 	SHIFT  -15          ; get msb
           213 : 4AAE;  -- 	AND    One          ; only msb (because shift is arithmetic)
           214 : 1239;  -- 	STORE  d16sC2       ; store as carry
           215 : 0A34;  -- 	LOAD   d16sN
           216 : 6001;  -- 	SHIFT  1            ; shift <<1
           217 : 5238;  -- 	OR     d16sC1       ; with carry
           218 : 1234;  -- 	STORE  d16sN
           219 : 0A37;  -- 	LOAD   d16sT
           21A : 6FFF;  -- 	ADDI   -1           ; decrement counter
           21B : 422B;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           21C : 1237;  -- 	STORE  d16sT
           21D : 0A3B;  -- 	LOAD   dres16sR
           21E : 6001;  -- 	SHIFT  1            ; shift remainder
           21F : 5239;  -- 	OR     d16sC2       ; with carry from other shift
           220 : 2235;  -- 	SUB    d16sD        ; subtract denominator from remainder
           221 : 3226;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           222 : 123B;  -- 	STORE  dres16sR
           223 : B801;  -- 	LOADI  1
           224 : 1238;  -- 	STORE  d16sC1       ; set carry
           225 : 2A11;  -- 	JUMP   Div16s_loop
           226 : 1A35;  -- 	ADD    d16sD        ; add denominator back in
           227 : 123B;  -- 	STORE  dres16sR
           228 : B800;  -- 	LOADI  0
           229 : 1238;  -- 	STORE  d16sC1       ; clear carry
           22A : 2A11;  -- 	JUMP   Div16s_loop
           22B : 0A34;  -- 	LOAD   d16sN
           22C : 123A;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           22D : 0A36;  -- 	LOAD   d16sS        ; check the sign indicator
           22E : 3230;  -- 	JNEG   Div16s_neg
           22F : 8800;  -- 	RETURN
           230 : 0A3A;  -- 	LOAD   dres16sQ     ; need to negate the result
           231 : 8172;  -- 	CALL   Neg
           232 : 123A;  -- 	STORE  dres16sQ
           233 : 8800;  -- 	RETURN	
           234 : 0000;  -- d16sN: DW 0 ; numerator
           235 : 0000;  -- d16sD: DW 0 ; denominator
           236 : 0000;  -- d16sS: DW 0 ; sign value
           237 : 0000;  -- d16sT: DW 0 ; temp counter
           238 : 0000;  -- d16sC1: DW 0 ; carry value
           239 : 0000;  -- d16sC2: DW 0 ; carry value
           23A : 0000;  -- dres16sQ: DW 0 ; quotient result
           23B : 0000;  -- dres16sR: DW 0 ; remainder result
           23C : 0A66;  -- 	LOAD   L2X
           23D : 8171;  -- 	CALL   Abs
           23E : 1268;  -- 	STORE  L2T1
           23F : 0A67;  -- 	LOAD   L2Y
           240 : 8171;  -- 	CALL   Abs
           241 : 2268;  -- 	SUB    L2T1
           242 : 325E;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           243 : 1A68;  -- 	ADD    L2T1
           244 : 11FD;  -- 	STORE  m16sa
           245 : B8F6;  -- 	LOADI  246       ; max * 246
           246 : 11FE;  -- 	STORE  m16sB
           247 : 81DA;  -- 	CALL   Mult16s
           248 : 0A02;  -- 	LOAD   mres16sH
           249 : 6008;  -- 	SHIFT  8
           24A : 1269;  -- 	STORE  L2T2
           24B : 0A01;  -- 	LOAD   mres16sL
           24C : 6018;  -- 	SHIFT  -8        ; / 256
           24D : 4AC0;  -- 	AND    LowByte
           24E : 5269;  -- 	OR     L2T2
           24F : 126A;  -- 	STORE  L2T3
           250 : 0A68;  -- 	LOAD   L2T1
           251 : 11FD;  -- 	STORE  m16sa
           252 : B868;  -- 	LOADI  104       ; min * 104
           253 : 11FE;  -- 	STORE  m16sB
           254 : 81DA;  -- 	CALL   Mult16s
           255 : 0A02;  -- 	LOAD   mres16sH
           256 : 6008;  -- 	SHIFT  8
           257 : 1269;  -- 	STORE  L2T2
           258 : 0A01;  -- 	LOAD   mres16sL
           259 : 6018;  -- 	SHIFT  -8        ; / 256
           25A : 4AC0;  -- 	AND    LowByte
           25B : 5269;  -- 	OR     L2T2
           25C : 1A6A;  -- 	ADD    L2T3     ; sum
           25D : 8800;  -- 	RETURN
           25E : 1A68;  -- 	ADD    L2T1
           25F : 1269;  -- 	STORE  L2T2
           260 : 0A68;  -- 	LOAD   L2T1
           261 : 126A;  -- 	STORE  L2T3
           262 : 0A69;  -- 	LOAD   L2T2
           263 : 1268;  -- 	STORE  L2T1
           264 : 0A6A;  -- 	LOAD   L2T3
           265 : 2A44;  -- 	JUMP   CalcDist
           266 : 0000;  -- L2X:  DW 0
           267 : 0000;  -- L2Y:  DW 0
           268 : 0000;  -- L2T1: DW 0
           269 : 0000;  -- L2T2: DW 0
           26A : 0000;  -- L2T3: DW 0
           26B : 9802;  -- 	OUT    TIMER
           26C : 9002;  -- 	IN     TIMER
           26D : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           26E : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           26F : 326C;  -- 	JNEG   Wloop
           270 : 8800;  -- 	RETURN
           271 : 8289;  -- 	CALL   GetBattLvl
           272 : 4271;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           273 : 22D7;  -- 	SUB    MinBatt
           274 : 3277;  -- 	JNEG   DeadBatt
           275 : 1AD7;  -- 	ADD    MinBatt     ; get original value back
           276 : 8800;  -- 	RETURN
           277 : B820;  -- 	LOADI  &H20
           278 : 980A;  -- 	OUT    BEEP        ; start beep sound
           279 : 8289;  -- 	CALL   GetBattLvl  ; get the battery level
           27A : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           27B : 9805;  -- 	OUT    SSEG2
           27C : 9806;  -- 	OUT    LCD
           27D : 0AAD;  -- 	LOAD   Zero
           27E : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           27F : 9801;  -- 	OUT    LEDS        ; all LEDs on
           280 : 9807;  -- 	OUT    XLEDS
           281 : 826B;  -- 	CALL   Wait1       ; 1 second
           282 : B940;  -- 	LOADI  &H140       ; short, high-pitched beep
           283 : 980A;  -- 	OUT    BEEP        ; stop beeping
           284 : 0AAD;  -- 	LOAD   Zero
           285 : 9801;  -- 	OUT    LEDS        ; LEDs off
           286 : 9807;  -- 	OUT    XLEDS
           287 : 826B;  -- 	CALL   Wait1       ; 1 second
           288 : 2A77;  -- 	JUMP   DeadBatt    ; repeat forever
           289 : 0AD9;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           28A : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           28B : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           28C : 8297;  -- 	CALL   BlockI2C    ; wait for it to finish
           28D : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           28E : 8800;  -- 	RETURN
           28F : 8297;  -- 	CALL   BlockI2C    ; wait for idle
           290 : 0AD8;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           291 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           292 : 0AAD;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           293 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           294 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           295 : 8297;  -- 	CALL   BlockI2C    ; wait for it to finish
           296 : 8800;  -- 	RETURN
           297 : 0AAD;  -- 	LOAD   Zero
           298 : 12A5;  -- 	STORE  Temp        ; Used to check for timeout
           299 : 0AA5;  -- 	LOAD   Temp
           29A : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           29B : 12A5;  -- 	STORE  Temp
           29C : 42A0;  -- 	JZERO  I2CError    ; Timeout occurred; error
           29D : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           29E : 3A99;  -- 	JPOS   BI2CL       ; If not 0, try again
           29F : 8800;  -- 	RETURN             ; Else return
           2A0 : 0AAD;  -- 	LOAD   Zero
           2A1 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           2A2 : 9804;  -- 	OUT    SSEG1
           2A3 : 9805;  -- 	OUT    SSEG2       ; display error message
           2A4 : 2AA0;  -- 	JUMP   I2CError
           2A5 : 0000;  -- Temp:        DW 0 ; "Temp" is not a great name, but can be useful
           2A6 : 0000;  -- Sensor2Dist: DW 0
           2A7 : 0000;  -- Sensor3Dist: DW 0
           2A8 : 01C2;  -- Threshold:   DW 450
           2A9 : 7F00;  -- ErrorNum:    DW &H7F00
           2AA : 0000;  -- StoreY:	     DW 0
           2AB : 0000;  -- StoreX:	     DW 0
           2AC : FFFF;  -- NegOne:   DW -1
           2AD : 0000;  -- Zero:     DW 0
           2AE : 0001;  -- One:      DW 1
           2AF : 0002;  -- Two:      DW 2
           2B0 : 0003;  -- Three:    DW 3
           2B1 : 0004;  -- Four:     DW 4
           2B2 : 0005;  -- Five:     DW 5
           2B3 : 0006;  -- Six:      DW 6
           2B4 : 0007;  -- Seven:    DW 7
           2B5 : 0008;  -- Eight:    DW 8
           2B6 : 0009;  -- Nine:     DW 9
           2B7 : 000A;  -- Ten:      DW 10
           2B8 : 0001;  -- Mask0:    DW &B00000001
           2B9 : 0002;  -- Mask1:    DW &B00000010
           2BA : 0004;  -- Mask2:    DW &B00000100
           2BB : 0008;  -- Mask3:    DW &B00001000
           2BC : 0010;  -- Mask4:    DW &B00010000
           2BD : 0020;  -- Mask5:    DW &B00100000
           2BE : 0040;  -- Mask6:    DW &B01000000
           2BF : 0080;  -- Mask7:    DW &B10000000
           2C0 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           2C1 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           2C2 : 03C1;  -- OneMeter:  DW 961       ; ~1m in 1.04mm units
           2C3 : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           2C4 : 0125;  -- Ft1:       DW 293
           2C5 : 01B8;  -- Ft1_5:     DW 440
           2C6 : 024A;  -- Ft2:       DW 586       ; ~2ft in 1.04mm units
           2C7 : 02DD;  -- Ft2_5:     DW 733
           2C8 : 036F;  -- Ft3:       DW 879
           2C9 : 0402;  -- Ft3_5:     DW 1026
           2CA : 0494;  -- Ft4:       DW 1172
           2CB : 0928;  -- Ft8:       DW 2344
           2CC : 0A4D;  -- Ft9:       DW 2637
           2CD : 005A;  -- Deg90:     DW 90        ; 90 degrees in odometer units
           2CE : 00B4;  -- Deg180:    DW 180       ; 180
           2CF : 010E;  -- Deg270:    DW 270       ; 270
           2D0 : 0168;  -- Deg360:    DW 360       ; can never actually happen; for math only
           2D1 : 0064;  -- FSlow:     DW 100       ; 100 is about the lowest velocity value that will move
           2D2 : FF9C;  -- RSlow:     DW -100
           2D3 : 015E;  -- FMid:      DW 350       ; 350 is a medium speed
           2D4 : FEA2;  -- RMid:      DW -350
           2D5 : 01F4;  -- FFast:     DW 500       ; 500 is almost max speed (511 is max)
           2D6 : FE0C;  -- RFast:     DW -500
           2D7 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           2D8 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           2D9 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           2DA : 0000;  -- MoveDistance:    DW 0
           2DB : 0000;  -- MoveHeading:	 DW 0
           2DC : 0000;  -- ObstDistance:	 DW 0
           2DD : 0002;  -- Tries:		 DW 2
           2DE : 0000;  -- 	DW 0
  END;
